/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module tst_4 (
    input clk,
    input rst,
    input button,
    output reg [15:0] seg,
    output reg [15:0] out
  );
  
  
  
  wire [1-1:0] M_edge_out;
  reg [1-1:0] M_edge_in;
  edge_detector_11 L_edge (
    .clk(clk),
    .in(M_edge_in),
    .out(M_edge_out)
  );
  localparam BEGIN_state = 4'd0;
  localparam ADD_state = 4'd1;
  localparam SUB_state = 4'd2;
  localparam MUL_state = 4'd3;
  localparam AND_state = 4'd4;
  localparam OR_state = 4'd5;
  localparam XOR_state = 4'd6;
  localparam A_state = 4'd7;
  localparam SHL_state = 4'd8;
  localparam SHR_state = 4'd9;
  localparam SRA_state = 4'd10;
  localparam CMPEQ_state = 4'd11;
  localparam CMPLE_state = 4'd12;
  localparam CMPLT_state = 4'd13;
  localparam GOOD_state = 4'd14;
  localparam ERROR_state = 4'd15;
  
  reg [3:0] M_state_d, M_state_q = BEGIN_state;
  reg [26:0] M_timer_d, M_timer_q = 1'h0;
  wire [16-1:0] M_alu_out;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [8-1:0] M_alu_io_dip;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  alu_3 alu (
    .clk(clk),
    .rst(rst),
    .io_dip(M_alu_io_dip),
    .a(M_alu_a),
    .b(M_alu_b),
    .out(M_alu_out),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  localparam OADD = 8'h00;
  
  localparam OSUB = 8'h04;
  
  localparam OMUL = 8'h08;
  
  localparam OAND = 8'h60;
  
  localparam OOR = 8'h78;
  
  localparam OXOR = 8'h58;
  
  localparam OA = 8'h68;
  
  localparam OSHL = 8'h80;
  
  localparam OSHR = 8'h84;
  
  localparam OSRA = 8'h8c;
  
  localparam OCMPEQ = 8'hcc;
  
  localparam OCMPLT = 8'hd4;
  
  localparam OCMPLE = 8'hdc;
  
  localparam RADD = 16'h7a00;
  
  localparam RSUB = 16'h3000;
  
  localparam RMUL = 16'h4900;
  
  localparam RAND = 16'h0500;
  
  localparam ROR = 16'h7500;
  
  localparam RXOR = 16'h7000;
  
  localparam RA = 16'h2500;
  
  localparam RSHL = 16'ha000;
  
  localparam RSHR = 16'h0100;
  
  localparam RSRA = 16'h0100;
  
  localparam RCMPEQ = 16'h0000;
  
  localparam RCMPLT = 16'h0000;
  
  localparam RCMPLE = 16'h0000;
  
  localparam A = 16'h5500;
  
  localparam B = 16'h2500;
  
  always @* begin
    M_state_d = M_state_q;
    M_timer_d = M_timer_q;
    
    seg = 1'h0;
    M_alu_a = 16'h5500;
    M_alu_b = 16'h2500;
    M_alu_io_dip = 1'h0;
    out = 1'h0;
    M_timer_d = M_timer_q + 1'h1;
    M_edge_in = button;
    
    case (M_state_q)
      BEGIN_state: begin
        seg = 16'hdefd;
        if (M_edge_out) begin
          M_state_d = ADD_state;
        end
      end
      ADD_state: begin
        M_alu_io_dip = 8'h00;
        seg = 13'h1bbb;
        if (M_edge_out) begin
          M_state_d = SUB_state;
        end else begin
          if (M_timer_q[25+1-:2] == 1'h1) begin
            seg = 16'h5500;
          end else begin
            if (M_timer_q[25+1-:2] == 2'h2) begin
              seg = 16'h2500;
            end else begin
              if (M_timer_q[25+1-:2] == 2'h3) begin
                seg = {M_alu_out[12+3-:4], M_alu_out[9+3-:4], M_alu_out[4+3-:4], M_alu_out[0+3-:4]};
                if (M_alu_out != 16'h7a00) begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      SUB_state: begin
        M_alu_io_dip = 8'h04;
        seg = 14'h2bbb;
        if (M_edge_out) begin
          M_state_d = MUL_state;
        end else begin
          if (M_timer_q[25+1-:2] == 1'h1) begin
            seg = 16'h5500;
          end else begin
            if (M_timer_q[25+1-:2] == 2'h2) begin
              seg = 16'h2500;
            end else begin
              if (M_timer_q[25+1-:2] == 2'h3) begin
                seg = {M_alu_out[12+3-:4], M_alu_out[9+3-:4], M_alu_out[4+3-:4], M_alu_out[0+3-:4]};
                if (M_alu_out != 16'h3000) begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      MUL_state: begin
        M_alu_io_dip = 8'h08;
        seg = 14'h3bbb;
        if (M_edge_out) begin
          M_state_d = AND_state;
        end else begin
          if (M_timer_q[25+1-:2] == 1'h1) begin
            seg = 16'h5500;
          end else begin
            if (M_timer_q[25+1-:2] == 2'h2) begin
              seg = 16'h2500;
            end else begin
              if (M_timer_q[25+1-:2] == 2'h3) begin
                seg = {M_alu_out[12+3-:4], M_alu_out[9+3-:4], M_alu_out[4+3-:4], M_alu_out[0+3-:4]};
                if (M_alu_out != 16'h4900) begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      OR_state: begin
        M_alu_io_dip = 8'h78;
        seg = 15'h4bbb;
        if (M_edge_out) begin
          M_state_d = AND_state;
        end else begin
          if (M_timer_q[25+1-:2] == 1'h1) begin
            seg = 16'h5500;
          end else begin
            if (M_timer_q[25+1-:2] == 2'h2) begin
              seg = 16'h2500;
            end else begin
              if (M_timer_q[25+1-:2] == 2'h3) begin
                seg = {M_alu_out[12+3-:4], M_alu_out[9+3-:4], M_alu_out[4+3-:4], M_alu_out[0+3-:4]};
                if (M_alu_out != 16'h7500) begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      AND_state: begin
        M_alu_io_dip = 8'h60;
        seg = 15'h5bbb;
        if (M_edge_out) begin
          M_state_d = XOR_state;
        end else begin
          if (M_timer_q[25+1-:2] == 1'h1) begin
            seg = 16'h5500;
          end else begin
            if (M_timer_q[25+1-:2] == 2'h2) begin
              seg = 16'h2500;
            end else begin
              if (M_timer_q[25+1-:2] == 2'h3) begin
                seg = {M_alu_out[12+3-:4], M_alu_out[9+3-:4], M_alu_out[4+3-:4], M_alu_out[0+3-:4]};
                if (M_alu_out != 16'h0500) begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      XOR_state: begin
        M_alu_io_dip = 8'h58;
        seg = 15'h6bbb;
        if (M_edge_out) begin
          M_state_d = A_state;
        end else begin
          if (M_timer_q[25+1-:2] == 1'h1) begin
            seg = 16'h5500;
          end else begin
            if (M_timer_q[25+1-:2] == 2'h2) begin
              seg = 16'h2500;
            end else begin
              if (M_timer_q[25+1-:2] == 2'h3) begin
                seg = {M_alu_out[12+3-:4], M_alu_out[9+3-:4], M_alu_out[4+3-:4], M_alu_out[0+3-:4]};
                if (M_alu_out != 16'h7000) begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      A_state: begin
        M_alu_io_dip = 8'h68;
        seg = 15'h7bbb;
        if (M_edge_out) begin
          M_state_d = SHL_state;
        end else begin
          if (M_timer_q[25+1-:2] == 1'h1) begin
            seg = 16'h5500;
          end else begin
            if (M_timer_q[25+1-:2] == 2'h2) begin
              seg = 16'h2500;
            end else begin
              if (M_timer_q[25+1-:2] == 2'h3) begin
                seg = {M_alu_out[12+3-:4], M_alu_out[9+3-:4], M_alu_out[4+3-:4], M_alu_out[0+3-:4]};
                if (M_alu_out != 16'h2500) begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      SHL_state: begin
        M_alu_io_dip = 8'h80;
        seg = 16'h8bbb;
        if (M_edge_out) begin
          M_state_d = SHR_state;
        end else begin
          if (M_timer_q[25+1-:2] == 1'h1) begin
            seg = 16'h5500;
          end else begin
            if (M_timer_q[25+1-:2] == 2'h2) begin
              seg = 16'h2500;
            end else begin
              if (M_timer_q[25+1-:2] == 2'h3) begin
                seg = {M_alu_out[12+3-:4], M_alu_out[9+3-:4], M_alu_out[4+3-:4], M_alu_out[0+3-:4]};
                if (M_alu_out != 16'ha000) begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      SHR_state: begin
        M_alu_io_dip = 8'h84;
        seg = 16'h9bbb;
        if (M_edge_out) begin
          M_state_d = SRA_state;
        end else begin
          if (M_timer_q[25+1-:2] == 1'h1) begin
            seg = 16'h5500;
          end else begin
            if (M_timer_q[25+1-:2] == 2'h2) begin
              seg = 16'h2500;
            end else begin
              if (M_timer_q[25+1-:2] == 2'h3) begin
                seg = {M_alu_out[12+3-:4], M_alu_out[9+3-:4], M_alu_out[4+3-:4], M_alu_out[0+3-:4]};
                if (M_alu_out != 16'h0100) begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      SRA_state: begin
        M_alu_io_dip = 8'h8c;
        seg = 10'h2bb;
        if (M_edge_out) begin
          M_state_d = CMPEQ_state;
        end else begin
          if (M_timer_q[25+1-:2] == 1'h1) begin
            seg = 16'h5500;
          end else begin
            if (M_timer_q[25+1-:2] == 2'h2) begin
              seg = 16'h2500;
            end else begin
              if (M_timer_q[25+1-:2] == 2'h3) begin
                seg = {M_alu_out[12+3-:4], M_alu_out[9+3-:4], M_alu_out[4+3-:4], M_alu_out[0+3-:4]};
                if (M_alu_out != 16'h0100) begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      CMPEQ_state: begin
        M_alu_io_dip = 8'hcc;
        seg = 10'h3bb;
        if (M_edge_out) begin
          M_state_d = CMPLE_state;
        end else begin
          if (M_timer_q[25+1-:2] == 1'h1) begin
            seg = 16'h5500;
          end else begin
            if (M_timer_q[25+1-:2] == 2'h2) begin
              seg = 16'h2500;
            end else begin
              if (M_timer_q[25+1-:2] == 2'h3) begin
                seg = {M_alu_out[12+3-:4], M_alu_out[9+3-:4], M_alu_out[4+3-:4], M_alu_out[0+3-:4]};
                if (M_alu_out != 16'h0000) begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      CMPLE_state: begin
        M_alu_io_dip = 8'hdc;
        seg = 11'h6bb;
        if (M_edge_out) begin
          M_state_d = CMPLT_state;
        end else begin
          if (M_timer_q[25+1-:2] == 1'h1) begin
            seg = 16'h5500;
          end else begin
            if (M_timer_q[25+1-:2] == 2'h2) begin
              seg = 16'h2500;
            end else begin
              if (M_timer_q[25+1-:2] == 2'h3) begin
                seg = {M_alu_out[12+3-:4], M_alu_out[9+3-:4], M_alu_out[4+3-:4], M_alu_out[0+3-:4]};
                if (M_alu_out != 16'h0000) begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      CMPLT_state: begin
        M_alu_io_dip = 8'hd4;
        seg = 11'h7bb;
        if (M_edge_out) begin
          M_state_d = GOOD_state;
        end else begin
          if (M_timer_q[25+1-:2] == 1'h1) begin
            seg = 16'h5500;
          end else begin
            if (M_timer_q[25+1-:2] == 2'h2) begin
              seg = 16'h2500;
            end else begin
              if (M_timer_q[25+1-:2] == 2'h3) begin
                seg = {M_alu_out[12+3-:4], M_alu_out[9+3-:4], M_alu_out[4+3-:4], M_alu_out[0+3-:4]};
                if (M_alu_out != 16'h0000) begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      GOOD_state: begin
        seg = 16'habbc;
      end
      ERROR_state: begin
        seg = 16'hbbbb;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_timer_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_timer_q <= M_timer_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
