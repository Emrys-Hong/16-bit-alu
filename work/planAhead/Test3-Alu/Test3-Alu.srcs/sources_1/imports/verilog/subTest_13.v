/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module subTest_13 (
    input clk,
    input rst,
    input button,
    input [3:0] count,
    output reg [15:0] out,
    output reg v,
    output reg n,
    output reg z,
    output reg true
  );
  
  
  
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_2 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  localparam BEGIN_state = 4'd0;
  localparam PP1_state = 4'd1;
  localparam PP2_state = 4'd2;
  localparam PP3_state = 4'd3;
  localparam PP4_state = 4'd4;
  localparam ZERO_state = 4'd5;
  localparam NN1_state = 4'd6;
  localparam NN2_state = 4'd7;
  localparam NN3_state = 4'd8;
  localparam NN4_state = 4'd9;
  localparam PN1_state = 4'd10;
  localparam PN2_state = 4'd11;
  localparam GOOD_state = 4'd12;
  localparam ERROR_state = 4'd13;
  
  reg [3:0] M_state_d, M_state_q = BEGIN_state;
  reg [27:0] M_timer_d, M_timer_q = 1'h0;
  wire [16-1:0] M_sub_out;
  wire [1-1:0] M_sub_z;
  wire [1-1:0] M_sub_v;
  wire [1-1:0] M_sub_n;
  reg [8-1:0] M_sub_io_dip;
  reg [16-1:0] M_sub_a;
  reg [16-1:0] M_sub_b;
  add_6 sub (
    .clk(clk),
    .rst(rst),
    .io_dip(M_sub_io_dip),
    .a(M_sub_a),
    .b(M_sub_b),
    .out(M_sub_out),
    .z(M_sub_z),
    .v(M_sub_v),
    .n(M_sub_n)
  );
  
  localparam PP1A = 16'h333c;
  
  localparam PP1B = 16'h0c4c;
  
  localparam PP2A = 16'h18c6;
  
  localparam PP2B = 16'h18c6;
  
  localparam PP3A = 16'h0f0f;
  
  localparam PP3B = 16'h0f0f;
  
  localparam PP4A = 16'h7fff;
  
  localparam PP4B = 16'h7fff;
  
  localparam ZEROA = 16'h0000;
  
  localparam ZEROB = 16'h0000;
  
  localparam NN1A = 16'hff00;
  
  localparam NN1B = 16'hfff0;
  
  localparam NN2A = 16'hfccc;
  
  localparam NN2B = 16'hfc33;
  
  localparam NN3A = 16'hf0f0;
  
  localparam NN3B = 16'hf0f0;
  
  localparam NN4A = 16'h8000;
  
  localparam NN4B = 16'h8000;
  
  localparam PN1A = 16'h0f0f;
  
  localparam PN1B = 16'h8fff;
  
  localparam PN2A = 16'h70f0;
  
  localparam PN2B = 16'h8f0f;
  
  localparam PP1 = 16'h2ef0;
  
  localparam PP2 = 16'hf25a;
  
  localparam PP3 = 16'h0000;
  
  localparam PP4 = 16'h0000;
  
  localparam ZERO = 16'h0000;
  
  localparam NN1 = 16'hff10;
  
  localparam NN2 = 16'h0099;
  
  localparam NN3 = 16'h0000;
  
  localparam NN4 = 16'h0000;
  
  localparam PN1 = 16'h7f10;
  
  localparam PN2 = 16'he1e1;
  
  always @* begin
    M_state_d = M_state_q;
    M_timer_d = M_timer_q;
    
    out = 1'h0;
    v = M_sub_v;
    n = M_sub_n;
    z = M_sub_z;
    M_sub_a = 1'h0;
    M_sub_b = 1'h0;
    M_timer_d = M_timer_q + 1'h1;
    M_sub_io_dip = 8'h01;
    true = 1'h0;
    M_edge_detector_in = button;
    
    case (M_state_q)
      BEGIN_state: begin
        if (count == 2'h2 & M_edge_detector_out) begin
          M_timer_d = 1'h0;
          M_state_d = PP1_state;
        end
      end
      PP1_state: begin
        M_sub_a = 16'h333c;
        M_sub_b = 16'h0c4c;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'h333c;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'h0c4c;
          end else begin
            if (M_timer_q[26+1-:2] == 2'h2) begin
              out = M_sub_out;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if ((M_sub_out == 16'h2ef0)) begin
                  M_timer_d = 1'h0;
                  M_state_d = PP2_state;
                end else begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      PP2_state: begin
        M_sub_a = 16'h18c6;
        M_sub_b = 16'h18c6;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'h18c6;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'h18c6;
          end else begin
            if (M_timer_q[26+1-:2] == 2'h2) begin
              out = M_sub_out;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if ((M_sub_out == 16'hf25a)) begin
                  M_timer_d = 1'h0;
                  M_state_d = PP3_state;
                end else begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      PP3_state: begin
        M_sub_a = 16'h0f0f;
        M_sub_b = 16'h0f0f;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'h0f0f;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'h0f0f;
          end else begin
            if (M_timer_q[26+1-:2] == 2'h2) begin
              out = M_sub_out;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if ((M_sub_out == 16'h0000)) begin
                  M_timer_d = 1'h0;
                  M_state_d = PP4_state;
                end else begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      PP4_state: begin
        M_sub_a = 16'h7fff;
        M_sub_b = 16'h7fff;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'h7fff;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'h7fff;
          end else begin
            if (M_timer_q[26+1-:2] == 2'h2) begin
              out = M_sub_out;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if ((M_sub_out == 16'h0000)) begin
                  M_timer_d = 1'h0;
                  M_state_d = ZERO_state;
                end else begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      ZERO_state: begin
        M_sub_a = 16'h0000;
        M_sub_b = 16'h0000;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'h0000;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'h0000;
          end else begin
            if (M_timer_q[26+1-:2] == 2'h2) begin
              out = M_sub_out;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if ((M_sub_out == 16'h0000)) begin
                  M_timer_d = 1'h0;
                  M_state_d = NN1_state;
                end else begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      NN1_state: begin
        M_sub_a = 16'hff00;
        M_sub_b = 16'hfff0;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'hff00;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'hfff0;
          end else begin
            if (M_timer_q[26+1-:2] == 2'h2) begin
              out = M_sub_out;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if ((M_sub_out == 16'hff10)) begin
                  M_timer_d = 1'h0;
                  M_state_d = NN2_state;
                end else begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      NN2_state: begin
        M_sub_a = 16'hfccc;
        M_sub_b = 16'hfc33;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'hfccc;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'hfc33;
          end else begin
            if (M_timer_q[26+1-:2] == 2'h2) begin
              out = M_sub_out;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if ((M_sub_out == 16'h0099)) begin
                  M_timer_d = 1'h0;
                  M_state_d = NN3_state;
                end else begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      NN3_state: begin
        M_sub_a = 16'hf0f0;
        M_sub_b = 16'hf0f0;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'hf0f0;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'hf0f0;
          end else begin
            if (M_timer_q[26+1-:2] == 2'h2) begin
              out = M_sub_out;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if ((M_sub_out == 16'h0000)) begin
                  M_timer_d = 1'h0;
                  M_state_d = NN4_state;
                end else begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      NN4_state: begin
        M_sub_a = 16'h8000;
        M_sub_b = 16'h8000;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'h8000;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'h8000;
          end else begin
            if (M_timer_q[26+1-:2] == 2'h2) begin
              out = M_sub_out;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if ((M_sub_out == 16'h0000)) begin
                  M_timer_d = 1'h0;
                  M_state_d = PN1_state;
                end else begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      PN1_state: begin
        M_sub_a = 16'h0f0f;
        M_sub_b = 16'h8fff;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'h0f0f;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'h8fff;
          end else begin
            if (M_timer_q[26+1-:2] == 2'h2) begin
              out = M_sub_out;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if ((M_sub_out == 16'h7f10)) begin
                  M_timer_d = 1'h0;
                  M_state_d = PN2_state;
                end else begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      PN2_state: begin
        M_sub_a = 16'h70f0;
        M_sub_b = 16'h8f0f;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'h70f0;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'h8f0f;
          end else begin
            if (M_timer_q[26+1-:2] == 2'h2) begin
              out = M_sub_out;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if ((M_sub_out == 16'he1e1)) begin
                  M_timer_d = 1'h0;
                  M_state_d = GOOD_state;
                end else begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      GOOD_state: begin
        if (M_timer_q[27+0-:1] == 1'h1) begin
          true = 1'h1;
        end else begin
          if (M_timer_q[25+0-:1] == 1'h1) begin
            out = 16'hff00;
          end else begin
            if (M_timer_q[25+0-:1] == 1'h0) begin
              out = 16'h0000;
            end
          end
        end
      end
      ERROR_state: begin
        if (M_timer_q[25+0-:1] == 1'h1) begin
          out = 16'h00ff;
        end else begin
          out = 16'h0000;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_timer_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_timer_q <= M_timer_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
