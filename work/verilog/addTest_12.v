/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module addTest_12 (
    input clk,
    input rst,
    input button,
    output reg [15:0] out,
    output reg v,
    output reg n,
    output reg z,
    output reg true
  );
  
  
  
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_2 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  localparam BEGIN_state = 4'd0;
  localparam PP_state = 4'd1;
  localparam PN_state = 4'd2;
  localparam NN_state = 4'd3;
  localparam V_state = 4'd4;
  localparam N_state = 4'd5;
  localparam Z_state = 4'd6;
  localparam GOOD_state = 4'd7;
  localparam ERROR_state = 4'd8;
  
  reg [3:0] M_state_d, M_state_q = BEGIN_state;
  reg [27:0] M_timer_d, M_timer_q = 1'h0;
  wire [16-1:0] M_add_out;
  wire [1-1:0] M_add_z;
  wire [1-1:0] M_add_v;
  wire [1-1:0] M_add_n;
  reg [8-1:0] M_add_io_dip;
  reg [16-1:0] M_add_a;
  reg [16-1:0] M_add_b;
  add_6 add (
    .clk(clk),
    .rst(rst),
    .io_dip(M_add_io_dip),
    .a(M_add_a),
    .b(M_add_b),
    .out(M_add_out),
    .z(M_add_z),
    .v(M_add_v),
    .n(M_add_n)
  );
  
  localparam P1 = 16'h0003;
  
  localparam P2 = 16'h4001;
  
  localparam P3 = 16'h0000;
  
  localparam N1 = 16'hbc0f;
  
  localparam N2 = 16'h8001;
  
  localparam N3 = 16'h8001;
  
  localparam PP = 16'h4004;
  
  localparam PN = 16'hbc12;
  
  localparam NN = 16'h3c10;
  
  localparam V = 16'h0002;
  
  always @* begin
    M_state_d = M_state_q;
    M_timer_d = M_timer_q;
    
    out = 1'h0;
    v = M_add_v;
    n = M_add_n;
    z = M_add_z;
    M_add_a = 1'h0;
    M_add_b = 1'h0;
    M_timer_d = M_timer_q + 1'h1;
    M_add_io_dip = 8'h00;
    true = 1'h0;
    M_edge_detector_in = button;
    
    case (M_state_q)
      BEGIN_state: begin
        if (M_timer_q[26+1-:2] == 2'h2 & M_edge_detector_out) begin
          M_timer_d = 1'h0;
          M_state_d = PP_state;
        end
      end
      PP_state: begin
        M_add_a = 16'h0003;
        M_add_b = 16'h4001;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'h0003;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'h4001;
          end else begin
            if (M_timer_q[26+1-:2] == 2'h2) begin
              out = M_add_out;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if ((M_add_out == 16'h4004)) begin
                  M_timer_d = 1'h0;
                  M_state_d = PN_state;
                end else begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      PN_state: begin
        M_add_a = 16'h0003;
        M_add_b = 16'hbc0f;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'h0003;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'hbc0f;
          end else begin
            if ((M_timer_q[26+1-:2] == 2'h2)) begin
              out = M_add_out;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if ((M_add_out == 16'hbc12)) begin
                  M_timer_d = 1'h0;
                  M_state_d = NN_state;
                end else begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      NN_state: begin
        M_add_a = 16'hbc0f;
        M_add_b = 16'h8001;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'hbc0f;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'h8001;
          end else begin
            if ((M_timer_q[26+1-:2] == 2'h2)) begin
              out = M_add_out;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if ((M_add_out == 16'h3c10)) begin
                  M_timer_d = 1'h0;
                  M_state_d = V_state;
                end else begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      V_state: begin
        M_add_a = 16'h8001;
        M_add_b = 16'h8001;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'h8001;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'h8001;
          end else begin
            if ((M_timer_q[26+1-:2] == 2'h2)) begin
              out = M_add_out;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if ((M_add_out == 16'h0002)) begin
                  M_timer_d = 1'h0;
                  M_state_d = Z_state;
                end else begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      Z_state: begin
        M_add_a = 16'h0000;
        M_add_b = 16'h0000;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'h0000;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'h0000;
          end else begin
            if ((M_timer_q[26+1-:2] == 2'h2)) begin
              out = M_add_out;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if ((M_add_out == 1'h0)) begin
                  M_timer_d = 1'h0;
                  M_state_d = N_state;
                end else begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      N_state: begin
        M_add_a = 16'h0003;
        M_add_b = 16'hbc0f;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'h0003;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'hbc0f;
          end else begin
            if (M_timer_q[26+1-:2] == 2'h2) begin
              out = M_add_out;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if ((M_add_out == 16'hbc12)) begin
                  M_timer_d = 1'h0;
                  M_state_d = GOOD_state;
                end else begin
                  M_state_d = ERROR_state;
                end
              end
            end
          end
        end
      end
      GOOD_state: begin
        if (M_timer_q[27+0-:1] == 1'h1) begin
          true = 1'h1;
        end else begin
          if (M_timer_q[25+0-:1] == 1'h1) begin
            out = 16'hff00;
          end else begin
            if (M_timer_q[25+0-:1] == 1'h0) begin
              out = 16'h0000;
            end
          end
        end
      end
      ERROR_state: begin
        if (M_timer_q[25+0-:1] == 1'h1) begin
          out = 16'h00ff;
        end else begin
          out = 16'h0000;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_timer_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_timer_q <= M_timer_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
