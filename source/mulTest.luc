module mulTest (
    input clk,  // clock
    input rst,  // reset
    // input
    input button,
    // out is to show input1 input2 input3
    output out[16],
    output true
  ) {
  
  .clk(clk) {
    .rst(rst) {
      fsm state = {BEGIN, PP1, PP2, NN1, NN2, PN1, PN2, PN3, GOOD, ERROR};
      dff timer[28];
      mul mul;
    }
  }
  
  // checking cases
  const PP1A = 16b0111000011110000;
  const PP1B = 16b0000000000000011;
  const PP2A = 16b0000000011110000;
  const PP2B = 16b0000000000000011;
  const NN1A = 16b1000000000000000;
  const NN1B = 16b1111111111111000;
  const NN2A = 16b1111111111111111;
  const NN2B = 16b1111111111111000;
  const PN1A = 16b0000000011110000;
  const PN1B = 16b1111111111111000;
  const PN2A = 16b0111000011110000;
  const PN2B = 16b1111111111111000;
  const PN3A = 16b0000000011110000;
  const PN3B = 16b1000000000000000;
  
  // correct results
  const PP1 = 16b0101001111010000;
  const PP2 = 16b0000001011010000;
  const NN1 = 16b0000000000000000;
  const NN2 = 16b0000000000000000;
  const PN1 = 16b1111100010000000;
  const PN2 = 16b0111100010000000;
  const PN3 = 16b0000000000000000;
  
  
  always {
    // define default outputs
    out = 0;
    mul.a = 0;
    mul.b = 0;
    timer.d = timer.q+1;
    // alufn for add
    mul.io_dip = 8b00000010;
    // define true to be false
    true = 0;
    
    // cases
    case(state.q) {
      state.BEGIN:
        if (timer.q[27:26]==2 & ~button) {
          timer.d = 0;
          state.d = state.PP1;
        }
      
      state.PP1:
        mul.a = PP1A;
        mul.b = PP1B;
        if (timer.q[27:26]==0) {
          // show input1
          out = PP1A;
        } else if (timer.q[27:26]==1) {
          out = PP1B;
        } else if ( timer.q[27:26]==2) {
          // show result
          out = mul.out;
        } else if (timer.q[27:26]==3) {
          if (mul.out==PP1){
            timer.d = 0;
            state.d = state.PP2;
          } else {
            state.d = state.ERROR;
          }
        }
      
      state.PP2:
        mul.a = PP2A;
        mul.b = PP2B;
        if (timer.q[27:26]==0) {
          // show input1
          out = PP2A;
        } else if (timer.q[27:26]==1) {
          out = PP2B;
        } else if ( timer.q[27:26]==2) {
          // show result
          out = mul.out;
        } else if (timer.q[27:26]==3) {
          if (mul.out==PP2){
            timer.d = 0;
            state.d = state.NN1;
          } else {
            state.d = state.ERROR;
          }
        }
      
      state.NN1:
        mul.a = NN1A;
        mul.b = NN1B;
        if (timer.q[27:26]==0) {
          // show input1
          out = NN1A;
        } else if (timer.q[27:26]==1) {
          out = NN1B;
        } else if ( timer.q[27:26]==2) {
          // show result
          out = mul.out;
        } else if (timer.q[27:26]==3) {
          if (mul.out==NN1){
            timer.d = 0;
            state.d = state.NN2;
          } else {
            state.d = state.ERROR;
          }
        }
      
      state.NN2:
        mul.a = NN2A;
        mul.b = NN2B;
        if (timer.q[27:26]==0) {
          // show input1
          out = NN2A;
        } else if (timer.q[27:26]==1) {
          out = NN2B;
        } else if ( timer.q[27:26]==2) {
          // show result
          out = mul.out;
        } else if (timer.q[27:26]==3) {
          if (mul.out==NN2){
            timer.d = 0;
            state.d = state.PN1;
          } else {
            state.d = state.ERROR;
          }
        }
      
      state.PN1:
        mul.a = PN1A;
        mul.b = PN1B;
        if (timer.q[27:26]==0) {
          // show input1
          out = PN1A;
        } else if (timer.q[27:26]==1) {
          out = PN1B;
        } else if ( timer.q[27:26]==2) {
          // show result
          out = mul.out;
        } else if (timer.q[27:26]==3) {
          if (mul.out==PN1){
            timer.d = 0;
            state.d = state.PN2;
          } else {
            state.d = state.ERROR;
          }
        }
      
      state.PN2:
        mul.a = PN2A;
        mul.b = PN2B;
        if (timer.q[27:26]==0) {
          // show input1
          out = PN2A;
        } else if (timer.q[27:26]==1) {
          out = PN2B;
        } else if ( timer.q[27:26]==2) {
          // show result
          out = mul.out;
        } else if (timer.q[27:26]==3) {
          if (mul.out==PN2){
            timer.d = 0;
            state.d = state.PN3;
          } else {
            state.d = state.ERROR;
          }
        }
      
      state.PN3:
        mul.a = PN3A;
        mul.b = PN3B;
        if (timer.q[27:26]==0) {
          // show input1
          out = PN3A;
        } else if (timer.q[27:26]==1) {
          out = PN3B;
        } else if ( timer.q[27:26]==2) {
          // show result
          out = mul.out;
        } else if (timer.q[27:26]==3) {
          if (mul.out==PN3){
            timer.d = 0;
            state.d = state.GOOD;
          } else {
            state.d = state.ERROR;
          }
        }
      
      state.GOOD:
        if (timer.q[27] == 1) {
          true = 1;
          
        } else if (timer.q[25] == 1) {
          out = 16b1111111100000000;
        } else if (timer.q[25]==0){
          out = 16b0000000000000000;
        }
      
      state.ERROR:
        if (timer.q[25] == 1) {
          out = 16b0000000011111111;
        } else {
          out = 16b0000000000000000;
        }
      
    }
  }
}