module tst (
    input clk,  // clock
    input rst,  // reset
    
    // confirm to next state button
    input button,
    // only need output to show it on the screen
    output seg[16],
    output out[16]
  ) {
  
    .clk(clk) {
    edge_detector edge;
      .rst(rst) {
        fsm state = {BEGIN, ADD, SUB, MUL, AND, OR, XOR, A, SHL, SHR,
         SRA, CMPEQ, CMPLE, CMPLT, GOOD, ERROR};
      dff timer[27];
      alu alu;
      addTest addTest(.button(button));
    }
  }
  
    const OADD   = 8b00000000;
    const OSUB   = 8b00000100;
    const OMUL   = 8b00001000; 
    const OAND   = 8b01100000; 
    const OOR    = 8b01111000;
    const OXOR   = 8b01011000; 
    const OA     = 8b01101000;
    const OSHL   = 8b10000000; 
    const OSHR   = 8b10000100; 
    const OSRA   = 8b10001100;
    const OCMPEQ = 8b11001100; 
    const OCMPLT = 8b11010100; 
    const OCMPLE = 8b11011100;
  
    const RSUB   = 16b0011000000000000;
    const RMUL   = 16b0100100100000000;
    const RAND   = 16b0000010100000000; 
    const ROR    = 16b0111010100000000;
    const RXOR   = 16b0111000000000000; 
    const RA     = 16b0010010100000000;
    const RSHL   = 16b1010000000000000; 
    const RSHR   = 16b0000000100000000; 
    const RSRA   = 16b0000000100000000;
    const RCMPEQ = 16b0000000000000000; 
    const RCMPLT = 16b0000000000000000; 
    const RCMPLE = 16b0000000000000000;
  
    const A = 16b0101010100000000;
    const B = 16b0010010100000000;
  
  always {
    
    // default assign
    seg=0;
    alu.a=A;
    alu.b=B;
    alu.io_dip=0;
    out=0;
    
    timer.d = timer.q+1;
    edge.in = button;
    case(state.q) {
      state.BEGIN:
        seg = c{13,14,15,13}; // TEST
        if (edge.out) {
          state.d = state.ADD;
        }
      
      // ADD
      state.ADD:
        out = addTest.out;
        alu.io_dip=OADD;
        seg = c{1,11,11,11}; 
        // duration 1s
        if(addTest.true==1){
          state.d = state.SUB;
        }
        
        
      // SUB
      state.SUB:
        alu.io_dip=OSUB;
        seg = c{2,11,11,11}; 
        // duration 1s
        if (edge.out) {
          state.d = state.MUL;
        } else if (timer.q[26:25]==1) {
          seg=c{A[15-:4], A[11-:4], A[7-:4], A[3-:4]};
        } else if (timer.q[26:25]==2) {
          seg=c{B[15-:4], B[11-:4], B[7-:4], B[3-:4]};
        } else if (timer.q[26:25]==3) {
          seg=c{alu.out[15-:4], alu.out[12-:4], alu.out[7-:4], alu.out[3-:4]};
          if (alu.out!=RSUB) {
              state.d=state.ERROR;
          }
        }
        
      // MUL
      state.MUL:
        alu.io_dip=OMUL;
        seg = c{3,11,11,11}; 
        // duration 1s
        if (edge.out) {
          state.d = state.AND;
        } else if (timer.q[26:25]==1) {
          seg=c{A[15-:4], A[11-:4], A[7-:4], A[3-:4]};
        } else if (timer.q[26:25]==2) {
          seg=c{B[15-:4], B[11-:4], B[7-:4], B[3-:4]};
        } else if (timer.q[26:25]==3) {
          seg=c{alu.out[15-:4], alu.out[12-:4], alu.out[7-:4], alu.out[3-:4]};
          if (alu.out!=RMUL) {
              state.d=state.ERROR;
          }
        }
        
      // OR
      state.OR:
        alu.io_dip=OOR;
        seg = c{4,11,11,11}; 
        // duration 1s
        if (edge.out) {
          state.d = state.AND;
        } else if (timer.q[26:25]==1) {
          seg=c{A[15-:4], A[11-:4], A[7-:4], A[3-:4]};
        } else if (timer.q[26:25]==2) {
          seg=c{B[15-:4], B[11-:4], B[7-:4], B[3-:4]};
        } else if (timer.q[26:25]==3) {
          seg=c{alu.out[15-:4], alu.out[12-:4], alu.out[7-:4], alu.out[3-:4]};
          if (alu.out!=ROR) {
              state.d=state.ERROR;
          }
        }
      
      // AND
      state.AND:
        alu.io_dip=OAND;
        seg = c{5,11,11,11}; 
        // duration 1s
        if (edge.out) {
          state.d = state.XOR;
        } else if (timer.q[26:25]==1) {
          seg=c{A[15-:4], A[11-:4], A[7-:4], A[3-:4]};
        } else if (timer.q[26:25]==2) {
          seg=c{B[15-:4], B[11-:4], B[7-:4], B[3-:4]};
        } else if (timer.q[26:25]==3) {
          seg=c{alu.out[15-:4], alu.out[12-:4], alu.out[7-:4], alu.out[3-:4]};
          if (alu.out!=RAND) {
              state.d=state.ERROR;
          }
        }
        
      // XOR
      state.XOR:
        alu.io_dip=OXOR;
        seg = c{6,11,11,11};
        // duration 1s
        if (edge.out) {
          state.d = state.A;
        } else if (timer.q[26:25]==1) {
          seg=c{A[15-:4], A[11-:4], A[7-:4], A[3-:4]};
        } else if (timer.q[26:25]==2) {
          seg=c{B[15-:4], B[11-:4], B[7-:4], B[3-:4]};
        } else if (timer.q[26:25]==3) {
          seg=c{alu.out[15-:4], alu.out[12-:4], alu.out[7-:4], alu.out[3-:4]};
          if (alu.out!=RXOR) {
              state.d=state.ERROR;
          }
        }
        
      // A
      state.A:
        alu.io_dip=OA;
        seg = c{7,11,11,11}; 
        // duration 1s
        if (edge.out) {
          state.d = state.SHL;
        } else if (timer.q[26:25]==1) {
          seg=c{A[15-:4], A[11-:4], A[7-:4], A[3-:4]};
        } else if (timer.q[26:25]==2) {
          seg=c{B[15-:4], B[11-:4], B[7-:4], B[3-:4]};
        } else if (timer.q[26:25]==3) {
          seg=c{alu.out[15-:4], alu.out[12-:4], alu.out[7-:4], alu.out[3-:4]};
          if (alu.out!=RA) {
              state.d=state.ERROR;
          }
        }
        
      // SHL
      state.SHL:
        alu.io_dip=OSHL;
        seg = c{8,11,11,11};
        // duration 1s
        if (edge.out) {
          state.d = state.SHR;
        } else if (timer.q[26:25]==1) {
          seg=c{A[15-:4], A[11-:4], A[7-:4], A[3-:4]};
        } else if (timer.q[26:25]==2) {
          seg=c{B[15-:4], B[11-:4], B[7-:4], B[3-:4]};
        } else if (timer.q[26:25]==3) {
          seg=c{alu.out[15-:4], alu.out[12-:4], alu.out[7-:4], alu.out[3-:4]};
          if (alu.out!=RSHL) {
              state.d=state.ERROR;
          }
        }
        
      // SHR
      state.SHR:
        alu.io_dip=OSHR;
        seg = c{9,11,11,11}; 
        // duration 1s
        if (edge.out) {
          state.d = state.SRA;
        } else if (timer.q[26:25]==1) {
          seg=c{A[15-:4], A[11-:4], A[7-:4], A[3-:4]};
        } else if (timer.q[26:25]==2) {
          seg=c{B[15-:4], B[11-:4], B[7-:4], B[3-:4]};
        } else if (timer.q[26:25]==3) {
          seg=c{alu.out[15-:4], alu.out[12-:4], alu.out[7-:4], alu.out[3-:4]};
          if (alu.out!=RSHR) {
              state.d=state.ERROR;
          }
        }
        
      // SRA
      state.SRA:
        alu.io_dip=OSRA;
        seg = c{1,0,11,11}; 
        // duration 1s
        if (edge.out) {
          state.d = state.CMPEQ;
        } else if (timer.q[26:25]==1) {
          seg=c{A[15-:4], A[11-:4], A[7-:4], A[3-:4]};
        } else if (timer.q[26:25]==2) {
          seg=c{B[15-:4], B[11-:4], B[7-:4], B[3-:4]};
        } else if (timer.q[26:25]==3) {
          seg=c{alu.out[15-:4], alu.out[12-:4], alu.out[7-:4], alu.out[3-:4]};
          if (alu.out!=RSRA) {
              state.d=state.ERROR;
          }
        }
        
      // CMPEQ
      state.CMPEQ:
        alu.io_dip=OCMPEQ;
        seg = c{1,1,11,11}; 
        // duration 1s
        if (edge.out) {
          state.d = state.CMPLE;
        } else if (timer.q[26:25]==1) {
          seg=c{A[15-:4], A[11-:4], A[7-:4], A[3-:4]};
        } else if (timer.q[26:25]==2) {
          seg=c{B[15-:4], B[11-:4], B[7-:4], B[3-:4]};
        } else if (timer.q[26:25]==3) {
          seg=c{alu.out[15-:4], alu.out[12-:4], alu.out[7-:4], alu.out[3-:4]};
          if (alu.out!=RCMPEQ) {
              state.d=state.ERROR;
          }
        }
        
      // CMPLE
      state.CMPLE:
        alu.io_dip=OCMPLE;
        seg = c{1,2,11,11}; 
        // duration 1s
        if (edge.out) {
          state.d = state.CMPLT;
        } else if (timer.q[26:25]==1) {
          seg=c{A[15-:4], A[11-:4], A[7-:4], A[3-:4]};
        } else if (timer.q[26:25]==2) {
          seg=c{B[15-:4], B[11-:4], B[7-:4], B[3-:4]};
        } else if (timer.q[26:25]==3) {
          seg=c{alu.out[15-:4], alu.out[12-:4], alu.out[7-:4], alu.out[3-:4]};
          if (alu.out!=RCMPLE) {
              state.d=state.ERROR;
          }
        }
        
      // CMPLT
      state.CMPLT:
        alu.io_dip=OCMPLT;
        seg = c{1,3,11,11}; 
        // duration 1s
        if (edge.out) {
          state.d = state.GOOD;
        } else if (timer.q[26:25]==1) {
          seg=c{A[15-:4], A[11-:4], A[7-:4], A[3-:4]};
        } else if (timer.q[26:25]==2) {
          seg=c{B[15-:4], B[11-:4], B[7-:4], B[3-:4]};
        } else if (timer.q[26:25]==3) {
          seg=c{alu.out[15-:4], alu.out[12-:4], alu.out[7-:4], alu.out[3-:4]};
          if (alu.out!=RCMPLT) {
              state.d=state.ERROR;
          }
        }
        
      // GOOD
      state.GOOD:
        seg = c{10,11,11,12};
        
      // ERROR
      state.ERROR:
        seg = c{11,11,11,11};
      
        
    
  }
}
}