module subTest (
    input clk,  // clock
    input rst,  // reset
    // input
    input button,
    input count[4],
    // out is to show input1 input2 input3
    output out[16],
    output v,
    output n,
    output z,
    output true,
    output step[8]
  ) {
  
  .clk(clk) {
    edge_detector edge_detector(#RISE(1), #FALL(0));
    .rst(rst) {
      fsm state = {BEGIN, PP1, PP2, PP3, PP4, PP5, GOOD, ERROR};
      dff timer[28];
      add sub;
    }
  }
  
  // checking cases
  const PP1A = 16b0111111111111111;
  const PP1B = 16b0000000011111111;
  const PP1 = 16b0111111100000000;
  
  const PP2A = 16b0111111111111111;
  const PP2B = 16b0111111111111111;
  const PP2 = 16b0000000000000000;
  
  const PP3A = 16b0000000000000001;
  const PP3B = 16b0000000000000010;
  const PP3 = 16b1111111111111111;
  
  const PP4A = 16b0000000000000001;
  const NN4B = 16b1111111111111111;
  const PP4 = 16b0000000000000010;
  
  const NN5A = 16b1111111111111111;
  const NN5B = 16b1111111111111101;
  const PP5 =  16b0000000000000010; // why this is not 0000000000000001?
  
  
  
  
  
  
  always {
    // define default outputs
    out = 0;
    v = sub.v;
    n = sub.n;
    z = sub.z;
    sub.a = 0;
    sub.b = 0;
    timer.d = timer.q+1;
    // alufn for add
    sub.io_dip = 8b00000001;
    // define true to be false
    true = 0;
    
    edge_detector.in = button;
    step = 0;
    // cases
    case(state.q) {
      state.BEGIN:
        if (count==2 & edge_detector.out) {
          timer.d = 0;
          state.d = state.PP1;
        }
      
      state.PP1:
        sub.a = PP1A;
        sub.b = PP1B;
        step = 1;
        if (timer.q[27:26]==0) {
          // show input1
          out = PP1A;
        } else if (timer.q[27:26]==1) {
          out = PP1B;
        } else if ( timer.q[27:26]==2) {
          // show result
          out = sub.out;
        } else if (timer.q[27:26]==3) {
          if ((sub.out==PP1) ){//&(sub.v==0)&(sub.z==0)&(sub.n==0)
            timer.d = 0;
            state.d = state.PP2;
          } else {
            state.d = state.ERROR;
          }
        }
      
      state.PP2:
        sub.a = PP2A;
        sub.b = PP2B;
        step = 2;
        if (timer.q[27:26]==0) {
          // show input1
          out = PP2A;
        } else if (timer.q[27:26]==1) {
          out = PP2B;
        } else if ( timer.q[27:26]==2) {
          // show result
          out = sub.out;
        } else if (timer.q[27:26]==3) {
          if ((sub.out==PP2) ){//&(sub.v==0)&(sub.z==0)&(sub.n==1)
            timer.d = 0;
            state.d = state.PP3;
          } else {
            state.d = state.ERROR;
          }
        }
      
      state.PP3:
        sub.a = PP3A;
        sub.b = PP3B;
        step = 4;
        if (timer.q[27:26]==0) {
          // show input1
          out = PP3A;
        } else if (timer.q[27:26]==1) {
          out = PP3B;
        } else if ( timer.q[27:26]==2) {
          // show result
          out = sub.out;
        } else if (timer.q[27:26]==3) {
          if ((sub.out==PP3) ){//&(sub.v==0)&(sub.z==1)&(sub.n==0)
            timer.d = 0;
            state.d = state.PP4;
          } else {
            state.d = state.ERROR;
          }
        }
      
      state.PP4:
        sub.a = PP4A;
        sub.b = NN4B;
        step = 8;
        if (timer.q[27:26]==0) {
          // show input1
          out = PP4A;
        } else if (timer.q[27:26]==1) {
          out = NN4B;
        } else if ( timer.q[27:26]==2) {
          // show result
          out = sub.out;
        } else if (timer.q[27:26]==3) {
          if ((sub.out==PP4) ){//&(sub.v==0)&(sub.z==1)&(sub.n==0)
            timer.d = 0;
            state.d = state.PP5;
          } else {
            state.d = state.ERROR;
          }
        }
      
      state.PP5:
        sub.a = NN5A;
        sub.b = NN5B;
        if (timer.q[27:26]==0) {
          // show input1
          out = NN5A;
        } else if (timer.q[27:26]==1) {
          out = NN5B;
        } else if ( timer.q[27:26]==2) {
          // show result
          out = sub.out;
        } else if (timer.q[27:26]==3) {
          if ((sub.out==PP5) ){//&(sub.v==0)&(sub.z==1)&(sub.n==0)
            timer.d = 0;
            state.d = state.GOOD;
          } else {
            state.d = state.ERROR;
          }
        }
      
      
      
      state.GOOD:
        if (timer.q[27] == 1) {
          true = 1;
          
        } else if (timer.q[25] == 1) {
          out = 16b1111111100000000;
        } else if (timer.q[25]==0){
          out = 16b0000000000000000;
        }
      
      state.ERROR:
        if (timer.q[25] == 1) {
          out = 16b0000000011111111;
        } else {
          out = 16b0000000000000000;
        }
    }
  }
}